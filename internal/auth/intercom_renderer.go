package auth

import (
	_ "embed"
	"fmt"
	"html/template"
	"net/http"
)

//go:embed templates/identify_intercom.tmpl
var intercomTemplateContent string

// Pre-parse the template at startup
var intercomTemplate *template.Template

func init() {
	var err error
	intercomTemplate, err = template.New("identify_intercom").Parse(intercomTemplateContent)
	if err != nil {
		panic(fmt.Sprintf("failed to parse Intercom template: %v", err))
	}
}

// IntercomRenderer implements IdentifyRenderer for Intercom authentication.
// The Intercom JWT is generated by Auth0 Action and passed through this service.
type IntercomRenderer struct {
	AppID string
	// Secret and TTL removed - JWT is now pre-generated by Auth0
}

// intercomTemplateData holds the data for the Intercom HTML template.
type intercomTemplateData struct {
	AppID    string
	JWT      string
	Email    string
	Name     string
	ReturnTo string
}

// Render renders HTML that boots the Intercom Messenger with pre-generated JWT and redirects.
// The JWT is provided by Auth0 Action and passed through in the IdentifyPayload.
func (r *IntercomRenderer) Render(w http.ResponseWriter, p IdentifyPayload) error {
	// Validate required fields
	if r.AppID == "" {
		return fmt.Errorf("intercom app ID is required")
	}
	if p.ReturnTo == "" {
		return fmt.Errorf("return URL is required")
	}
	if p.IntercomJWT == "" {
		return fmt.Errorf("intercom JWT is required (must be provided by Auth0 Action in ID token)")
	}

	// Prepare template data - use pre-generated JWT from Auth0
	// Note: user_id is not needed in template since JWT contains authoritative identity
	data := intercomTemplateData{
		AppID:    r.AppID,
		JWT:      p.IntercomJWT, // Use JWT from Auth0 Action
		Email:    p.Email,
		Name:     p.Name,
		ReturnTo: p.ReturnTo,
	}

	// Set headers
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.Header().Set("Cache-Control", "no-store, max-age=0")
	w.Header().Set("Pragma", "no-cache")

	// Execute template
	if err := intercomTemplate.Execute(w, data); err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	return nil
}
